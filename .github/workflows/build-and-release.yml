name: Build & Release CAN Tool

on:
  # Only build on tags like v1.2.3 (and allow manual runs from Actions tab)
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Allow this workflow to create releases and upload assets
permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1) Check out repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Setup Node 20 + enable npm cache keyed by frontend lockfile
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      # 3) Setup Python 3.12 (needed for PyInstaller)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # 4) Install frontend deps deterministically
      - name: npm ci (frontend)
        working-directory: frontend
        run: npm ci

      # 5) Ensure Rollup has the right native binary for THIS runner OS.
      #    This fixes:
      #    "Cannot find module @rollup/rollup-<platform>"
      - name: Ensure Rollup native binary for this OS
        shell: bash
        working-directory: frontend
        run: |
          set -euo pipefail
          case "${{ runner.os }}" in
            Windows)
              npm i -D @rollup/rollup-win32-x64-msvc@^4
              ;;
            macOS)
              npm i -D @rollup/rollup-darwin-arm64@^4
              ;;
            Linux)
              npm i -D @rollup/rollup-linux-x64-gnu@^4
              ;;
          esac

      # 6) Build the frontend (Vite)
      - name: Build frontend
        working-directory: frontend
        run: npm run build

      # 7) Copy built frontend into backend/static so the backend can serve it
      - name: Stage frontend assets into backend/static
        shell: bash
        run: |
          mkdir -p backend/static
          cp -r frontend/dist/* backend/static/

      # 8) Install backend deps + PyInstaller
      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pyinstaller

      # 9) Build the executable via your PyInstaller spec
      - name: PyInstaller build
        run: pyinstaller can-tool.spec

      # 10) Upload each OS build output as an artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # Artifact name includes OS + commit so each runner uploads a unique bundle
          name: can-tool-${{ matrix.os }}-${{ github.sha }}
          path: dist/*
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # explicit here too

    steps:
      # 11) Download ALL artifacts from the matrix builds into one folder.
      #     merge-multiple: true flattens artifacts into ./dist/
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List downloaded files
        shell: bash
        run: |
          echo "Files in dist/:"
          ls -lah dist

      # 12) Create or update the GitHub Release & upload assets idempotently.
      #     - If the release for this tag exists, we just upload/overwrite assets.
      #     - If it doesn't, we create it then upload.
      - name: Create or update release (idempotent) and upload assets
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}       # auth for gh cli
          TAG: ${{ github.ref_name }}         # e.g. v0.0.3
        run: |
          set -euo pipefail

          echo "Using tag: $TAG"

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists. Will upload and overwrite assets as needed."
          else
            echo "Creating new release $TAG"
            gh release create "$TAG" \
              --title "$TAG" \
              --notes "Automated release for $TAG"
          fi

          shopt -s nullglob
          files=(dist/*)
          if (( ${#files[@]} == 0 )); then
            echo "No files found in dist/ â€” failing."
            exit 1
          fi

          echo "Uploading ${#files[@]} file(s) to release $TAG:"
          printf ' - %s\n' "${files[@]}"

          # --clobber overwrites assets with the same filename (idempotent)
          gh release upload "$TAG" "${files[@]}" --clobber
