name: CAN Tool â€“ Build & (optional) Release

on:
  workflow_dispatch:
  push:
    branches: [ main, feature/packaged-executable ]
    tags:
      - 'v*'        # push a tag like v1.2.3 to create a release
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13]  # macOS Intel; add macos-latest if you want Apple Silicon runners

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Frontend ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install & build frontend
        working-directory: frontend
        run: |
          npm ci || npm install
          npm run build

      - name: Stage built frontend into backend/static
        run: |
          rm -rf backend/static
          mkdir -p backend/static
          cp -r frontend/dist/* backend/static/

      # ---------- Backend / PyInstaller ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            can-tool.spec

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          else
            pip install fastapi "uvicorn[standard]" pyinstaller python-can pydantic jinja2
          fi

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --clean --noconfirm can-tool.spec

      # ---------- Package artifacts ----------
      - name: Package (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package | Out-Null
          Copy-Item dist\can-tool.exe package\
          Compress-Archive -Path package\* -DestinationPath can-tool-${{ matrix.os }}.zip

      - name: Package (Unix)
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          tar -C dist -czf can-tool-${{ matrix.os }}.tar.gz can-tool

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: can-tool-${{ matrix.os }}
          path: |
            can-tool-*.zip
            can-tool-*.tar.gz
            dist/**

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write   # required to create a release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            artifacts/**/can-tool-*.zip
            artifacts/**/can-tool-*.tar.gz
