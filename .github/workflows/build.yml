name: Build

on:
  push:        # still runs on every push
    branches: ["**"]
  workflow_dispatch:

jobs:
  build:
    name: build (${{ matrix.os }})
    strategy:
      fail-fast: false                     # let other OS finish even if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      # 1) Check out the repo so runner has your code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Install Node 20 and enable npm cache using the frontend lockfile
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      # 3) Install Python 3.12 for the backend and PyInstaller packaging
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      # 4) Backend deps for packaging the server
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      # 5) Install frontend deps from the lockfile (fast & reproducible)
      - name: npm ci (frontend)
        working-directory: frontend
        run: npm ci

      # 6) *** IMPORTANT FIX ***
      # NPM sometimes skips Rollup's platform package when the lockfile
      # was created on Linux. Explicitly install the native package on
      # Windows/macOS so "vite build" can find Rollup's binary.
      - name: Install Rollup native binary on Windows/macOS
        if: runner.os != 'Linux'
        shell: bash
        working-directory: frontend
        run: |
          if [[ "${RUNNER_OS}" == "Windows" ]]; then
            npm i --no-save @rollup/rollup-win32-x64-msvc
          elif [[ "${RUNNER_OS}" == "macOS" ]]; then
            # arm64 runner
            npm i --no-save @rollup/rollup-darwin-arm64
          fi

      # 7) Build the frontend with Vite (now succeeds on all OS)
      - name: Build frontend
        working-directory: frontend
        run: npm run build

      # 8) Copy static assets into backend/static
      - name: Stage frontend assets into backend/static
        shell: bash
        run: |
          mkdir -p backend/static
          cp -r frontend/dist/* backend/static/

      # 9) Build the single-file executable with PyInstaller
      - name: Package app with PyInstaller
        run: pyinstaller can-tool.spec

      # 10) Upload the OS-specific artifact so you can download it
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: can-tool-${{ matrix.os }}-${{ github.sha }}
          path: dist/*
          if-no-files-found: error
